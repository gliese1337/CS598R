(def q (vau (a) % a))
(def cons (wrap/snc qcons))
(def car (wrap/ltr qcar))
(def cdr (wrap/ltr qcdr))
(def seq (wrap/ltr last))
(def eq? (wrap/snc qeq?))
(def qnil? (vau (a) % (eq? a ())))
(def nil? (wrap/ltr qnil?))
(def bool? (wrap/ltr qbool?))
(def unwrap (wrap/ltr qunwrap))
(def '@ (vau (p args) %
	(% (cons (unwrap p) args))))
(def @ (wrap/ltr '@))
(def qcall (vau (p . args) %
	(% (cons p args))))
(def call (wrap/snc qcall))

(def print (wrap qprint))

(def check (vau (a b name) % 
	(def va (% a))
	(def vb (% b))
	((eq? va vb)
		(print "Passed " name "
")
		(print "Failed " name ": " a " = " va ", " b " = " vb "
"))))
(def cond (vau opts eval
	((nil? opts) ()
		(seq
			(def opt (car opts))
			(def test (eval (car opt)))
			((bool? test)
				(eval (test
					(car (cdr opt))
					(cons cond (cdr opts))))
				(panic "Non-boolean condition"))))))

(def var (vau (a . b) % b))

(sprof)
(check (car (qcons a b)) (q a) "'car'/'qcons' test 1")
(check (car (qcons (a b) c)) (q (a b)) "'car'/'qcons' test 2")
(check (cdr (qcons a (b c))) (q (b c)) "'car'/'qcons' test 3")
(check (qcar (cons a b)) (q cons) "'qcar'/'cons' test")
(check (car (cons #t #f)) #t "'car'/'cons' test")
(check (cdr (cons #t #f)) #f "'cdr'/'cons' test")
(check (last car cdr cons) (q cons) "'last' test")
(check (seq car cdr cons) cons "'seq' test")
(check (bind/cc k (seq #t (k #f) car cdr)) #f "'bind/cc' test")
(check (@ cons (q (a b))) (q (a . b)) "@ test")
(check (call qcons (q a) (q b)) (q ( a . b)) "call test")
(check (var a b c d) (qlist b c d) "variadic test 1")
(check (call var 1 2 3 4) (qlist 2 3 4) "variadic test 2")
(check (cond) () "empty cond")
(check (cond (#t "result"))
	"result"
	"cond test 1")
(check (cond
	(#f "false")
	(#t "true"))
	"true"
	"cond test 2")
(check (cond
	(#f "hello")
	((nil? 5) "yo")
	((car (qlist #t #f)) "result"))
	"result"
	"cond test 3")
(wprof "basicprof.txt")
