(def q (vau (a) % a))
(def cons (wrap/snc qcons))
(def cons/ltr (wrap/ltr qcons))
(def car (wrap/ltr qcar))
(def cdr (wrap/ltr qcdr))
(def list (wrap/snc qlist))
(def list/ltr (wrap/ltr qlist))
(def seq (wrap/ltr last))
(def par (wrap/snc last))
(def qns (vau (e b) % (e b)))
(def ns (wrap/ltr qns))
(def cur-env (vau () % %))
(def new-env (vau () % (cur-env)))
(def read (wrap/ltr qread))
(def eq? (wrap/snc qeq?))
(def eq?/ltr (wrap/ltr qeq?))
(def qnil? (vau (a) % (eq? a ())))
(def nil? (wrap/ltr qnil?))
(def & (vau a % ((nil? a) #t ((% (car a)) (% (cons & (cdr a)) #f)))))
(def | (vau a % ((nil? a) #f ((% (car a)) #t (% (cons | (cdr a)))))))
(def qxor (vau (a b) % (a (b #f #t) (b #t #f))))
(def ^ (wrap/snc qxor))
(def call/cc (vau (fn) % (bind/cc k (fn k))))
(def * (wrap/snc '*))
(def */ltr (wrap/ltr '*))
(def / (wrap/snc '/))
(def //ltr (wrap/ltr '/))
(def + (wrap/snc '+))
(def +/ltr (wrap/ltr '+))
(def - (wrap/snc '-))
(def -/ltr (wrap/ltr '-))
(def < (wrap/ltr '<))
(def < (wrap/ltr '<))
(def <= (wrap/ltr '<=))
(def <= (wrap/ltr '<=))
(def > (wrap/ltr '>))
(def > (wrap/ltr '>))
(def >= (wrap/ltr '>=))
(def >= (wrap/ltr '>=))
(def sym? (wrap/ltr qsym?))
(def str? (wrap/ltr qstr?))
(def bool? (wrap/ltr qbool?))
(def num? (wrap/ltr qnum?))
(def pair? (wrap/ltr qpair?))
(def qnot (vau (a) % (a #f #t)))
(def not (wrap/ltr qnot))
(def fn/snc
	(vau (args body) %
		(wrap/snc (% (list/ltr vau args ## body)))))
(def fn/ltr
	(vau (args body) %
		(wrap/ltr (% (list/ltr vau args ## body)))))
(def unwrap (wrap/ltr qunwrap))
(def '@ (vau (p args) %
	(% (cons p args))))
(def @ (wrap/ltr '@))
(def qcall (vau (p . args) %
	(% (cons (unwrap p) args))))
(def call (wrap/snc qcall))
(def call/ltr (wrap/ltr qcall))

(def rec (fn/ltr (f) (vau a % (% (cons f (cons f a))))))
(def rec/vau (vau (args e body) % (seq
	(def f (% (list/ltr vau (cons (q self) args) e body)))
	(vau args v (v f (cons f args))))))
(def rec/snc (vau (args body) % (seq
	(def f (wrap/snc (% (list/ltr vau (cons (q self) args) e body))))
	(vau args e (e f (cons f args))))))
(def rec/ltr (vau (args body) % (seq
	(def f (wrap/ltr (% (list/ltr vau (cons (q self) args) e body))))
	(vau args e (e f (cons f args))))))

(def map (rec (fn/ltr (self f l) ((nil? l) l (cons (f (car l)) (self f (cdr l))))))
(def map/snc (fn/ltr (f l) (@ list (map (vau (e) % (list f (% e))) l))))
(def for/snc (vau (i range body) %
	(map/snc (call/ltr vau (list i) ## body) (% range))))

(def unique (wrap/ltr qunique))
(def macro (vau (args body) %
	(seq 	(def e (unique body))
		(call/ltr vau args e (list % (list e body))))))

(def let (vau (bindings body) ##
	(@	(wrap/snc (call/ltr vau (map car bindings) ## body))
		(map cdr bindings))))

(def print (wrap/snc qprint))
(def println (fn/snc a % (seq (@ print a) (qprint "
"))))

(def check (vau (a b name) % (seq
	(def va (% a))
	(def vb (% b))
	((eq? va vb)
		(println "Passed " name)
		(println "Failed " name ": " a " = " va ", " b " = " vb)))))
(def cond (vau opts eval
	((nil? opts) ()
		(seq
			(def opt (car opts))
			(def test (eval (car opt)))
			((bool? test)
				(eval (test
					(car (cdr opt))
					(cons cond (cdr opts))))
				(panic "Non-boolean condition"))))))