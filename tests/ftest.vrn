(def q (vau (a) % a))
(def cons (wrap/snc qcons))
(def cons/ltr (wrap/ltr qcons))
(def car (wrap/ltr qcar))
(def cdr (wrap/ltr qcdr))
(def list (wrap/snc qlist))
(def list/ltr (wrap/ltr qlist))
(def seq (wrap/ltr last))
(def par (wrap/snc last))
(def qns (vau (e b) % (e b)))
(def ns (wrap/ltr qns))
(def cur-env (vau () % %))
(def new-env (vau () % (cur-env)))
(def read (wrap/ltr qread))
(def eq? (wrap/snc qeq?))
(def eq?/ltr (wrap/ltr qeq?))
(def qnil? (vau (a) % (eq? a ())))
(def nil? (wrap/ltr qnil?))
(def & (vau a % ((nil? a) #t ((% (car a)) (% (cons & (cdr a)) #f)))))
(def | (vau a % ((nil? a) #f ((% (car a)) #t (% (cons | (cdr a)))))))
(def qxor (vau (a b) % (a (b #f #t) (b #t #f))))
(def ^ (wrap/snc qxor))
(def call/cc (vau (fn) % (bind/cc k (fn k))))
(def * (wrap/snc '*))
(def */ltr (wrap/ltr '*))
(def / (wrap/snc '/))
(def //ltr (wrap/ltr '/))
(def + (wrap/snc '+))
(def +/ltr (wrap/ltr '+))
(def - (wrap/snc '-))
(def -/ltr (wrap/ltr '-))
(def < (wrap/snc '<))
(def </ltr (wrap/ltr '<))
(def <= (wrap/snc '<=))
(def <=/ltr (wrap/ltr '<=))
(def > (wrap/snc '>))
(def >/ltr (wrap/ltr '>))
(def >= (wrap/snc '>=))
(def >=/ltr (wrap/ltr '>=))
(def sym? (wrap/ltr qsym?))
(def str? (wrap/ltr qstr?))
(def bool? (wrap/ltr qbool?))
(def num? (wrap/ltr qnum?))
(def pair? (wrap/ltr qpair?))
(def lazy? (wrap/ltr qlazy?))
(def qnot (vau (a) % (a #f #t)))
(def strict (wrap/ltr qstrict))

(def unwrap (wrap/ltr qunwrap))
(def '@ (vau (p args) %
	(% (cons (unwrap p) args))))
(def @ (wrap/ltr '@))

(def print (wrap qprint))

(def check (vau (a b name) % 
	(def va (% a))
	(def vb (% b))
	((eq? va vb)
		(print "Passed " name "
")
		(print "Failed " name ": " a " = " va ", " b " = " vb "
"))))

(check (strict (defer (+ 1 1))) 2 "defer test")
(check (strict (spawn (+ 1 1))) 2 "spawn test")
(check ((defer car) (cons 1 2)) 1 "callsite strictness 1")
(check ((defer (defer car)) (cons 1 2)) 1 "callsite strictness 2")
(check (@ + (defer (cons 1 (cons 2 ())))) 3 "arg strictness 1")
(check (@ + (defer (cons 1 (defer (cons 2 (cons 3 ())))))) 6 "arg strictness 2")
(check (@ + (cons 1 (defer (cons 2 (cons 3 ()))))) 6 "arg strictness 3")
(check (lazy? ((cur-env) (defer (+ 1 1)))) #t "lazy propagation test 1")
(check (strict ((cur-env) (defer (+ 1 1)))) 2 "lazy propagation test 2")
